{
    "collab_server" : "",
    "contents" : "pgbart_train <- function(train_data, train_label, if_test = FALSE, test_data = matrix(nrow = 0, ncol = 0), test_label = vector(length = 0),\n  model_file, alpha_bart = 3.0, q_bart = 0.9, alpha_split = 0.95, beta_split = 0.5, if_center_label = FALSE,\n\tess_threshold = 1.0, init_seed_id = 1, if_set_seed = TRUE,k_bart = 2.0, m_bart = 200, min_size = 1, ndpost = 200, nskip = 100, keepevery = 1,\n\tverbose_level = 1, n_particles = 10) {\n  \n  if_debug=FALSE\n  variance_type = \"unconditional\"\n  resample_type = \"multinomial\"\n  if(is.null(train_data))\n    stop(\"ERROR: you miss a train_data parameter!\")\n  if(!is.matrix(train_data))\n    stop(\"ERROR: train_data must be a matrix!\")\n  if(is.null(train_label))\n    stop(\"ERROR: you miss a train_label parameter!\")\n  if(!is.vector(train_label))\n    stop(\"ERROR: train_label must be a vector!\")\n  if(nrow(train_data)!= length(train_label))\n    stop(\"ERROR: the number of train_data must be equal to the length of train_label!\")\n  if(if_test) {\n    if(is.null(test_data))\n      stop(\"ERROR: you miss a test_data parameter!\")\n    if(!is.matrix(test_data))\n      stop(\"ERROR: test_data must be a matrix!\")\n    if(is.null(test_label))\n      stop(\"ERROR: you miss a test_label parameter!\")\n    if(!is.vector(test_label))\n      stop(\"ERROR: test_label must be a vector!\")\n    if(dim(test_data)[1] != length(test_label))\n      stop(\"ERROR: the number of train_data must be equal to the length of train_label!\")\n  }\n  if(is.null(model_file))\n    stop(\"ERROR: you miss a model_file parameter!\")\n  if(!is.character(model_file))\n    stop(\"ERROR: model_file must be a character!\")\n  if(file.exists(model_file))\n    file.remove(model_file)\n  if(alpha_bart < 0)\n    stop(\"alpha_bart is the df parameter in BART, it must be positive, default 3.0!\")\n  if(!(q_bart >= 0 && q_bart <= 1.0))\n    stop(\"q_bart controls the prior over sigma^2 in BART, and needs to be in [0, 1], default 0.9!\")\n  if(!(alpha_split >= 0 && alpha_split <= 1.0))\n    stop(\"alpha_split for cgm tree prior and needs to be in [0, 1], default 0.95!\")\n  if(beta_split < 0)\n    stop(\"(1/beta_split) for cgm tree prior and needs to be greater than 0, default 0.5!\")\n  if(ess_threshold < 0)\n    stop(\"ess_threshold needs to be in [0, 1], default 1.0!\")\n  if(init_seed_id < 0)\n    stop(\"ess_threshold needs to be greater than 0, default 1!\")\n  if(k_bart < 0)\n    stop(\"k_bart controls the prior over mu (mu_prec) in BART, it must be positive, default 2.0!\")\n  if(m_bart < 1)\n    stop(\"m_bart specifies the number of trees in BART, it must be not less than 1, default 1!\")\n  if(min_size < 1)\n    stop(\"min_size is minimum number of data points at leaf nodes, it must be not less than 1, default 1!\")\n  if(ndpost < 1)\n    stop(\"ERROR: ndpost must be not less than 1\")\n  if(nskip < 1)\n    stop(\"ERROR: nskip must be not less than 1\")\n  if(keepevery < 1)\n    stop(\"ERROR: keepevery must be not less than 1\")\n  if(variance_type != \"unconditional\")\n    stop(\"variance_type must be \\\"unconditional\\\"!\")\n  if(verbose_level < 0 || verbose_level >= 2)\n    stop(\"verbosity level (0 is minimum, 1 is maximum), default 1!\")\n  if(n_particles < 1)\n    stop(\"n_particles is the number of particles, it must be not less than 1, default 10!\")\n  if(resample_type != \"multinomial\" && resample_type != \"systematic\")\n    stop(\"control.resample_type must be \\\"multinomial\\\" or \\\"systematic\\\"!\")\n\n\n  val_tmp <- train(train_data, train_label, if_test, test_data, test_label, model_file, alpha_bart, alpha_split, beta_split, if_center_label,\n    if_debug, ess_threshold, init_seed_id, if_set_seed, k_bart, m_bart, min_size, ndpost,\n    nskip, keepevery, variance_type, q_bart, verbose_level, n_particles, resample_type)\n\n  if(if_center_label){\n    ori_mean <- mean(train_label)\n    val_tmp$yhat.train <- val_tmp$yhat.train + ori_mean\n    val_tmp$yhat.test <- val_tmp$yhat.test + ori_mean\n  }\n\n  val_tmp$yhat.train.mean <- colMeans(val_tmp$yhat.train)\n  val_tmp$yhat.test.mean <- colMeans(val_tmp$yhat.test)\n  if (!if_test) {\n    val_tmp$yhat.test <- NULL\n    val_tmp$mse.test <- NULL\n    val_tmp$loglik.test <- NULL\n    val_tmp$yhat.test.mean <- NULL\n  }\n  val <- list(train=NULL, test=NULL)\n  val$train <- list(yhat=val_tmp$yhat.train, yhat.mean=val_tmp$yhat.train.mean ,mse=val_tmp$mse.train, loglik=val_tmp$loglik.train,\n    first.sigma = 1 / sqrt(val_tmp$first.sigma), sigma= 1 / sqrt(val_tmp$sigma), varcount=val_tmp$varcount)\n  val$test <- list(yhat=val_tmp$yhat.test, yhat.mean=val_tmp$yhat.test.mean, mse=val_tmp$mse.test, loglik=val_tmp$loglik.test)\n  val\n}\n\n",
    "created" : 1497940124607.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1224091365",
    "id" : "D49D3478",
    "lastKnownWriteTime" : 1497940736,
    "last_content_update" : 1497940736,
    "path" : "E:/RStudio/pgbart/R/pgbart_train.R",
    "project_path" : "R/pgbart_train.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}